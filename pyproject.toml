[project]
name = "ds-platform-utils"
version = "0.0.4"
description = "Add your description here"
readme = "README.md"
authors = []
# requires-python = ">=3.7"
dependencies = [
    "outerbounds>=0.3.159",
    "pydantic>=2",
    "snowflake-connector-python>=3",
    "PyYAML",
    "pyarrow>=20.0.0",
    "pandas",
]

[dependency-groups]
dev = [
    "poethepoet>=0.34.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.7",
    "rich>=14.0.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# https://github.com/astral-sh/ruff?tab=readme-ov-file#configuration
[tool.ruff]
line-length = 119

# https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
extend-select = [
    # pycodestyle errors
    "E",
    # flake8-bugbear
    "B",
    # pylint equivalent rules
    "PL",
    # isort
    "I",
    # pydocstyle for docstrings
    "D",
    # pep8-naming
    "N",
]

ignore = [
    "D107", # Missing docstring in `__init__`
    "E501", # Line too long
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D103", # Missing docstring in public function
    "D101", # Missing docstring in public class
    "D401", # First line of docstring should be in imperative mood
    # Magic value used in comparison, consider replacing `4` with a constant variable -- Is problem for tests
    "PLR2004",
    # `with` statement variable `tmp_dir` overwritten by assignment target, eg: tests/unit_tests/components/metaflow_project/test__metaflow_project_.py:17:9
    "PLW2901",
]

# https://docs.astral.sh/ruff/rules/#mccabe-c90
[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.pytest.ini_options]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
pythonpath = ["."]
norecursedirs = [
    "src/ds_projen/samples/python_tests",
    "example-project",
    "tests/artifacts",
]
addopts = [
    "--cov=src",
    "--cov-fail-under=30",  # THIS SHOULD BE ATLEAST 90% in the future
    "--junitxml=test-reports/report.xml",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-report=term",
]

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "if False",
    "def __repr__",
    "if self.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise MemoryError",
    "except DistributionNotFound",
    "except ImportError",
    "@abc.abstractmethod",
    "if 0:",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
]
omit = ["tests/artifacts/*"]
show_missing = true

# Had to disable branch coverage because it was causing errors while generating coverage reports
# DataError: Can't combine statement coverage data with branch data
# DISABLING `branch=false` didn't make any difference
[tool.coverage.run]
branch = true
parallel = true
data_file = "test-reports/.coverage"

[tool.coverage.xml]
output = "test-reports/coverage.xml"

[tool.coverage.html]
directory = "test-reports/htmlcov"

[tool.coverage.json]
output = "test-reports/coverage.json"

[tool.poe.tasks.lint]
cmd = "uvx --from pre-commit pre-commit run --all-files"
help = "Run linting, formatting, projen synth, and other static code quality tools"

[tool.poe.tasks.test]
cmd = "pytest"
help = "Run all tests with optional additional arguments"


[tool.poe.tasks.serve-coverage-report]
help = "Serve the coverage report on http://localhost:3333"
shell = """
echo "Serving coverage report on http://localhost:3333"
echo "Press Ctrl+C to stop the server"

python -m http.server 3333 --directory ./test-reports/htmlcov
"""


[tool.poe.tasks.clean]
help = "Remove all files generated by tests, builds, or operating this codebase"
shell = """
rm -rf dist build coverage.xml test-reports sample/ tests/artifacts/

find . \\
    -type d \\
    \\( \\
    -name "*cache*" \\
    -o -name "*.dist-info" \\
    -o -name "*.egg-info" \\
    -o -name "*htmlcov" \\
    -o -name "*.metaflow" \\
    -o -name "*.metaflow.s3" \\
    -o -name "*.mypy_cache" \\
    -o -name "*.pytest_cache" \\
    -o -name "*.ruff_cache" \\
    -o -name "*__pycache__" \\
    \\) \\
    -not -path "*env/*" \\
    -exec rm -r {} + || true

find . \\
    -type f \\
    -name "*.pyc" \\
    -o -name "*.DS_Store" \\
    -o -name "*.coverage*" \\
    -not -path "*env/*" \\
    -exec rm {} +
"""
