/**
 * This SQL script creates temporary tables and performs various calculations and transformations on the data to generate inventory-related information.
 * The script starts by setting the start and end dates for the analysis period.
 * It then creates temporary tables to store intermediate results.
 * The first temporary table (_ASINS) selects distinct ordering regions, brands, and ASINs from the RPT_DAILY_SALES table.
 * The second temporary table (_PARENT_ASINS) retrieves ordering regions, parent ASINs, and ASINs.
 * The third temporary table (_PRODUCTS) combines the data from the previous two tables to get the final list of ordering regions, brands, parent ASINs, and ASINs.
 * The script then creates another temporary table (_D2C) using CTEs to calculate the D2C forecast for each master ID and marketplace.
 * Next, the script creates the _TEMP_INVENTORY table by joining various tables and aggregating the inventory data.
 * The _INVENTORY_POSITION table is created by further aggregating the data from _TEMP_INVENTORY.
 * The script then creates the _DATE_WINDOW table to represent all the dates within the analysis period.
 * The _ASIN_DATES table is created to ensure that all dates are represented for each ASIN.
 * Finally, the _INVENTORY_DATES table is created by joining the _INVENTORY_POSITION and _ASIN_DATES tables.
 * The script also creates the _OUT_OF_STOCK table to identify ASINs that are out of stock on specific dates.
 */
 
SET START_DATE = CURRENT_DATE() - 1;
SET END_DATE = CURRENT_DATE();

CREATE OR REPLACE TEMP TABLE _ASINS AS
SELECT DISTINCT ORDERING_REGION, VENDOR_ID, VENDOR_NAME AS BRAND, ASIN
FROM ANALYTICS_DB.CORE.RPT_DAILY_SALES S
WHERE UPPER(MARKETPLACE) ILIKE '%AMAZON%'
    AND DATE > $START_DATE::DATE - 365
    AND REVENUE_TOTAL > 0;

CREATE OR REPLACE TEMP TABLE _PARENT_ASINS AS
    SELECT
        ORDERING_REGION, PARENT_ASIN, ASIN
    FROM
        PATTERN_DB.DATA_SCIENCE.ASIN_PARENT_MAPPING AS A
    JOIN
        PATTERN_DB.PUBLIC.ORDERING_REGIONS O
            ON O.COUNTRY_CODE = A.COUNTRY_CODE
;

CREATE OR REPLACE TEMP TABLE _PRODUCTS AS
    SELECT
        A.ORDERING_REGION,
        A.BRAND,
        COALESCE(P.PARENT_ASIN, A.ASIN) AS PARENT_ASIN,
        A.ASIN AS ASIN
FROM _ASINS A
LEFT JOIN _PARENT_ASINS P
    ON A.ASIN = P.ASIN
    AND A.ORDERING_REGION = P.ORDERING_REGION;

-- Create the D2C table
CREATE OR REPLACE TEMP TABLE _D2C AS
WITH D2C AS (
    SELECT MASTER_ID,
           MARKETPLACE,
           WEEK_START,
           COALESCE(BASE_RATE_OVERWRITE, BASE_RATE) AS F1,
           COALESCE(PROMO_INCREASE_OVERWRITE, PROMO_INCREASE) AS F2,
           COALESCE(SEASONAL_INCREASE_OVERWRITE, SEASONAL_INCREASE) AS F3,
           F1 + F2 + F3 AS FORECAST
    FROM PATTERN_DB.BRAND_MANAGEMENT._TEMP_CURRENT_FORECAST_DATA_FOR_ORDERING_FILES
    WHERE TRUE
      AND MARKETPLACE NOT IN ('Amazon', 'Walmart')
      AND COUNTRY_CODE = 'US'
      AND WEEK_START BETWEEN (GETDATE()::DATE - 7) AND (GETDATE()::DATE + 21)
),
FORECAST AS (
    SELECT D2C.MASTER_ID,
           MARKETPLACE,
           AVG(FORECAST) AS D2C_FORECAST
    FROM D2C
    GROUP BY D2C.MASTER_ID, D2C.MARKETPLACE
),
PREP AS (
    SELECT WOC.MASTER_ID,
           WOC.MARKETPLACE,
           COALESCE(EXTRA_WEEKS_OF_SUPPLY_OVERWRITE, SAFETY_STOCK) AS D2C_WOC,
           SUM(D2C_FORECAST) AS D2C_FORECAST
    FROM PATTERN_DB.BRAND_MANAGEMENT.CURRENT_ALL_PROD_ORDERING_FILES WOC
    LEFT JOIN FORECAST ON WOC.MASTER_ID = FORECAST.MASTER_ID AND WOC.MARKETPLACE = FORECAST.MARKETPLACE
    WHERE WOC.MARKETPLACE NOT IN ('Amazon', 'Walmart')
      AND ORDERING_REGION_ALT = 'US'
    GROUP BY WOC.MASTER_ID, WOC.MARKETPLACE, EXTRA_WEEKS_OF_SUPPLY_OVERWRITE, SAFETY_STOCK
)
SELECT MASTER_ID,
       SUM(D2C_WOC * D2C_FORECAST) AS D2C_RESERVE
FROM PREP P
GROUP BY MASTER_ID;

CREATE OR REPLACE TEMP TABLE _TEMP_INVENTORY AS
WITH INVENTORY AS (
SELECT
    P.ASIN,
    P.ORDERING_REGION,
    INV.DATE,
    INV.STG_CATALOG__MARKETPLACES__NAME AS MARKETPLACE,
    INV.LISTING_FULFILLMENT_PROGRAM AS PROGRAM,
    SUM(
        CASE
            WHEN L.LISTING_FULFILLMENT_TYPE = 'FBM' THEN COALESCE(INV.WAREHOUSE_STOW_QUANTITY, 0)
            ELSE 0
        END
    ) AS AVAILABLE_FBM,
    SUM(COALESCE(INV.AVAILABLE_FBA_QUANTITY, 0)) AS AVAILABLE_FBA,
    SUM(
        CASE
            WHEN L.LISTING_FULFILLMENT_TYPE = 'FBM' THEN COALESCE(INV.WAREHOUSE_STOW_QUANTITY, 0)
            ELSE 0
        END
    ) + SUM(COALESCE(INV.AVAILABLE_FBA_QUANTITY, 0)) AS TOTAL_AVAILABLE,
    MIN(INV.DATE) OVER(PARTITION BY P.ASIN, P.ORDERING_REGION) AS FIRST_DATE,
    SUM(COALESCE(INV.INBOUND_FBA_QUANTITY, 0) + COALESCE(INV.WAREHOUSE_TOTAL_QUANTITY, 0) + COALESCE(INV.RESERVED_FC_TRANSFER_FBA_QUANTITY, 0) + COALESCE(INV.RESERVED_FC_PROCESSING_FBA_QUANTITY, 0)) AS TOTAL_COMING_INVENTORY,
    SUM(COALESCE(INV.RESERVED_FC_TRANSFER_FBA_QUANTITY, 0)) AS RESERVED_FC_TRANSFER_FBA_QUANTITY,
    SUM(COALESCE(INV.RESERVED_FC_PROCESSING_FBA_QUANTITY, 0)) AS RESERVED_FC_PROCESSING_FBA_QUANTITY,
    SUM(COALESCE(INV.WAREHOUSE_TOTAL_QUANTITY, 0)) AS WAREHOUSE_TOTAL_QUANTITY,
    SUM(COALESCE(INV.INBOUND_FBA_QUANTITY, 0)) AS INBOUND_FBA_QUANTITY,
    MAX(COALESCE(INV.WHOLESALE_PRICE, 0)) AS WHOLESALE_PRICE,
    MAX(INV.STG_AMACZAR__VENDORS__VENDOR_NAME) AS BRAND,
    SUM(COALESCE(INV.ON_ORDER_QUANTITY, 0)) AS ON_ORDER_QUANTITY,
    SUM(COALESCE(INV.WAREHOUSE_PROCESSING_QUANTITY, 0)) AS WAREHOUSE_PROCESSING_QUANTITY,
    SUM(COALESCE(D.D2C_RESERVE, 0)) AS D2C_RESERVE
FROM ANALYTICS_DB.CORE.INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST INV
JOIN PATTERN_DB.PUBLIC.ORDERING_REGIONS O ON O.COUNTRY_CODE = INV.COUNTRY_CODE
JOIN _PRODUCTS P
    ON P.ORDERING_REGION = O.ORDERING_REGION
    AND P.ASIN = INV.LISTING_MP_PAGE_ID
LEFT JOIN ANALYTICS_DB.STG_CATALOG.STG_CATALOG__LISTINGS L
    ON L.LISTING_MP_PAGE_ID = INV.LISTING_MP_PAGE_ID
FULL JOIN _D2C D
    ON D.MASTER_ID = INV.MASTER_ID
WHERE INV.DATE >= $START_DATE AND INV.DATE <= $END_DATE
    AND ASIN ILIKE 'B0%'
    AND UPPER(MARKETPLACE) ILIKE '%AMAZON%'
    AND INV.IS_DISCONTINUED_HISTORIC = FALSE OR INV.IS_DISCONTINUED_HISTORIC IS NULL
GROUP BY 1,2,3,4,5
)
SELECT
    ASIN,
    ORDERING_REGION,
    DATE,
    MAX(AVAILABLE_FBM) AS AVAILABLE_FBM,
    MAX(AVAILABLE_FBA) AS AVAILABLE_FBA,
    MAX(AVAILABLE_FBM) + MAX(AVAILABLE_FBA) AS TOTAL_AVAILABLE,
    MIN(FIRST_DATE) AS FIRST_DATE,
    MAX(TOTAL_COMING_INVENTORY) AS TOTAL_COMING_INVENTORY,
    MAX(RESERVED_FC_TRANSFER_FBA_QUANTITY) AS SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY,
    MAX(RESERVED_FC_PROCESSING_FBA_QUANTITY) AS SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY,
    MAX(WAREHOUSE_TOTAL_QUANTITY) AS SUM_WAREHOUSE_TOTAL_QUANTITY,
    MAX(INBOUND_FBA_QUANTITY) AS SUM_INBOUND_FBA_QUANTITY,
    MAX(WHOLESALE_PRICE) AS WHOLESALE_PRICE,
    MAX(BRAND) AS BRAND,
    MAX(ON_ORDER_QUANTITY) AS SUM_ON_ORDER_QUANTITY,
    MAX(WAREHOUSE_PROCESSING_QUANTITY) AS SUM_WAREHOUSE_PROCESSING_QUANTITY,
    MAX(D2C_RESERVE) AS D2C_RESERVE
FROM INVENTORY
WHERE PROGRAM ILIKE '%PANEU%'
-- WHERE PROGRAM ILIKE '%PANEU%'
GROUP BY 1,2,3
UNION
SELECT
    ASIN,
    ORDERING_REGION,
    DATE,
    SUM(AVAILABLE_FBM) AS AVAILABLE_FBM,
    SUM(AVAILABLE_FBA) AS AVAILABLE_FBA,
    SUM(AVAILABLE_FBM) + SUM(AVAILABLE_FBA) AS TOTAL_AVAILABLE,
    MIN(FIRST_DATE) AS FIRST_DATE,
    SUM(TOTAL_COMING_INVENTORY) AS TOTAL_COMING_INVENTORY,
    SUM(RESERVED_FC_TRANSFER_FBA_QUANTITY) AS SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY,
    SUM(RESERVED_FC_PROCESSING_FBA_QUANTITY) AS SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY,
    SUM(WAREHOUSE_TOTAL_QUANTITY) AS SUM_WAREHOUSE_TOTAL_QUANTITY,
    SUM(INBOUND_FBA_QUANTITY) AS SUM_INBOUND_FBA_QUANTITY,
    MAX(WHOLESALE_PRICE) AS WHOLESALE_PRICE,
    MAX(BRAND) AS BRAND,
    SUM(ON_ORDER_QUANTITY) AS SUM_ON_ORDER_QUANTITY,
    SUM(WAREHOUSE_PROCESSING_QUANTITY) AS SUM_WAREHOUSE_PROCESSING_QUANTITY,
    SUM(D2C_RESERVE) AS D2C_RESERVE
FROM INVENTORY
WHERE PROGRAM ILIKE '%NARF%' OR PROGRAM IS NULL
GROUP BY 1,2,3;


CREATE OR REPLACE TEMP TABLE _INVENTORY_POSITION AS
SELECT
    ASIN,
    ORDERING_REGION,
    DATE,
    SUM(AVAILABLE_FBM) AS AVAILABLE_FBM,
    SUM(AVAILABLE_FBA) AS AVAILABLE_FBA,
    SUM(AVAILABLE_FBM) + SUM(AVAILABLE_FBA) AS TOTAL_AVAILABLE,
    MIN(FIRST_DATE) AS FIRST_DATE,
    SUM(TOTAL_COMING_INVENTORY) AS TOTAL_COMING_INVENTORY,
    SUM(SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY) AS SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY,
    SUM(SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY) AS SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY,
    SUM(SUM_WAREHOUSE_TOTAL_QUANTITY) AS SUM_WAREHOUSE_TOTAL_QUANTITY,
    SUM(SUM_INBOUND_FBA_QUANTITY) AS SUM_INBOUND_FBA_QUANTITY,
    MAX(WHOLESALE_PRICE) AS WHOLESALE_PRICE,
    MAX(BRAND) AS BRAND,
    SUM(SUM_ON_ORDER_QUANTITY) AS SUM_ON_ORDER_QUANTITY,
    SUM(SUM_WAREHOUSE_PROCESSING_QUANTITY) AS SUM_WAREHOUSE_PROCESSING_QUANTITY,
    SUM(D2C_RESERVE) AS D2C_RESERVE
FROM _TEMP_INVENTORY
GROUP BY 1, 2, 3;


-- Create Date Window
CREATE OR REPLACE TEMP TABLE _DATE_WINDOW AS
SELECT DATE
FROM PREDICT_DB.PUBLIC.DATE_DIM
WHERE DATE BETWEEN $START_DATE AND $END_DATE;

-- Create ASIN Dates Table to Ensure All Dates are Represented for Each ASIN
CREATE OR REPLACE TEMP TABLE _ASIN_DATES AS
SELECT DISTINCT P.ASIN, P.ORDERING_REGION, DW.DATE
FROM _PRODUCTS P
CROSS JOIN _DATE_WINDOW DW
JOIN (SELECT DISTINCT ASIN, ORDERING_REGION FROM _INVENTORY_POSITION)
    USING(ASIN, ORDERING_REGION)
;

CREATE OR REPLACE TEMP TABLE _INVENTORY_DATES AS
SELECT
    AD.ASIN,
    AD.ORDERING_REGION,
    AD.DATE,
    COALESCE(INV.AVAILABLE_FBM, 0) AS AVAILABLE_FBM,
    COALESCE(INV.AVAILABLE_FBA, 0) AS AVAILABLE_FBA,
    COALESCE(INV.TOTAL_AVAILABLE, 0) AS TOTAL_AVAILABLE,
    COALESCE(INV.TOTAL_COMING_INVENTORY, 0) AS TOTAL_COMING_INVENTORY,
    COALESCE(INV.SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY, 0) AS SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY,
    COALESCE(INV.SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY, 0) AS SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY,
    COALESCE(INV.SUM_WAREHOUSE_TOTAL_QUANTITY, 0) AS SUM_WAREHOUSE_TOTAL_QUANTITY,
    COALESCE(INV.SUM_INBOUND_FBA_QUANTITY, 0) AS SUM_INBOUND_FBA_QUANTITY,
    COALESCE(INV.WHOLESALE_PRICE, 0) AS WHOLESALE_PRICE,
    COALESCE(INV.BRAND, '') AS BRAND,
    COALESCE(INV.SUM_ON_ORDER_QUANTITY, 0) AS SUM_ON_ORDER_QUANTITY,
    COALESCE(INV.SUM_WAREHOUSE_PROCESSING_QUANTITY, 0) AS SUM_WAREHOUSE_PROCESSING_QUANTITY,
    COALESCE(INV.D2C_RESERVE, -1) AS SUM_D2C_RESERVE
FROM _INVENTORY_POSITION INV
FULL JOIN _ASIN_DATES AD
    ON AD.ASIN = INV.ASIN
    AND AD.ORDERING_REGION = INV.ORDERING_REGION
    AND AD.DATE = INV.DATE
    AND AD.DATE > INV.FIRST_DATE;


-- Create temporary table for OUT_OF_STOCK
CREATE OR REPLACE TEMP TABLE _OUT_OF_STOCK AS
SELECT
    INV.ASIN,
    INV.ORDERING_REGION,
    INV.DATE,
    CASE
        WHEN (COALESCE(INV.AVAILABLE_FBM, 0) + COALESCE(INV.AVAILABLE_FBA, 0)) = 0 THEN TRUE
        ELSE FALSE
    END AS OUT_OF_STOCK
FROM _INVENTORY_DATES INV;

-- Calculate whether ASIN goes out of stock in the next 28 days
CREATE OR REPLACE TEMP TABLE _OUT_OF_STOCK_FUTURE AS
SELECT
    ASIN,
    ORDERING_REGION,
    DATE,
    MAX(OUT_OF_STOCK) OVER (PARTITION BY ASIN, ORDERING_REGION ORDER BY DATE ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS OUT_OF_STOCK_7,
    MAX(OUT_OF_STOCK) OVER (PARTITION BY ASIN, ORDERING_REGION ORDER BY DATE ROWS BETWEEN CURRENT ROW AND 13 FOLLOWING) AS OUT_OF_STOCK_14,
    MAX(OUT_OF_STOCK) OVER (PARTITION BY ASIN, ORDERING_REGION ORDER BY DATE ROWS BETWEEN CURRENT ROW AND 20 FOLLOWING) AS OUT_OF_STOCK_21,
    MAX(OUT_OF_STOCK) OVER (PARTITION BY ASIN, ORDERING_REGION ORDER BY DATE ROWS BETWEEN CURRENT ROW AND 27 FOLLOWING) AS OUT_OF_STOCK_28
FROM _OUT_OF_STOCK;

-- Deduplicate and aggregate historical forecast data
CREATE OR REPLACE TEMP TABLE _HISTORICAL_FORECAST AS
(SELECT
 ASIN,
 ORDERING_REGION,
 DATE AS FORECAST_DATE,
 SUM(FORECAST) OVER (PARTITION BY ASIN, ORDERING_REGION, FORECASTED_ON_DATE ORDER BY DATE
    ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS FORECAST -- Sum of forecasts for the first 7 days starting from forecasted_on_date
FROM (
 SELECT
 ASIN,
 ORDERING_REGION,
 FORECASTED_ON_DATE,
 DATE,
 FORECAST
 FROM PATTERN_DB.DATA_SCIENCE.FORECAST_UNITS_DAILY_HISTORICAL
 QUALIFY ROW_NUMBER() OVER (PARTITION BY ASIN, ORDERING_REGION, DATE ORDER BY FORECASTED_ON_DATE DESC) = 1
) AS DEDUPLICATED_FORECAST
WHERE DATE < '2024-10-06')
UNION ALL
(SELECT
    ASIN,
    ORDERING_REGION,
    START_FORECAST_DT AS FORECAST_DATE,
    DS_FORECAST AS FORECAST
FROM PATTERN_DB.DATA_SCIENCE_STAGE.DEMAND_FORECAST_DROPS
WHERE HORIZON_WEEK = 1
AND START_FORECAST_DT BETWEEN '2024-10-06' and '2025-03-02'
)
UNION ALL
(SELECT
    ASIN,
    ORDERING_REGION,
    START_FORECAST_DT AS FORECAST_DATE,
    DS_FORECAST AS FORECAST
FROM PATTERN_DB.DATA_SCIENCE.DEMAND_FORECAST
WHERE HORIZON_WEEK = 1
)
;


-- Create the features table
CREATE OR REPLACE TEMP TABLE _OUT_OF_STOCK_ADS_UNFILLED AS
SELECT
    INV.ORDERING_REGION,
    INV.ASIN,
    INV.DATE,
    INV.AVAILABLE_FBM,
    INV.AVAILABLE_FBA,
    INV.TOTAL_AVAILABLE,
    INV.TOTAL_COMING_INVENTORY,
    INV.SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY AS RESERVED_FC_TRANSFER_FBA_QUANTITY,
    INV.SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY AS RESERVED_FC_PROCESSING_FBA_QUANTITY,
    INV.SUM_WAREHOUSE_TOTAL_QUANTITY AS WAREHOUSE_TOTAL_QUANTITY,
    INV.SUM_INBOUND_FBA_QUANTITY AS INBOUND_FBA_QUANTITY,
    INV.WHOLESALE_PRICE,
    INV.BRAND,
    INV.SUM_ON_ORDER_QUANTITY AS ON_ORDER_QUANTITY,
    INV.SUM_WAREHOUSE_PROCESSING_QUANTITY AS WAREHOUSE_PROCESSING_QUANTITY,
    INV.SUM_D2C_RESERVE,
    OS.OUT_OF_STOCK,
    OSF.OUT_OF_STOCK_28,
    OSF.OUT_OF_STOCK_21,
    OSF.OUT_OF_STOCK_14,
    OSF.OUT_OF_STOCK_7,
    COALESCE(HF.FORECAST, -1) AS FORECAST
FROM _INVENTORY_DATES INV
JOIN _OUT_OF_STOCK OS
    ON INV.ASIN = OS.ASIN
    AND INV.ORDERING_REGION = OS.ORDERING_REGION
    AND INV.DATE = OS.DATE
JOIN _OUT_OF_STOCK_FUTURE OSF
    ON INV.ASIN = OSF.ASIN
    AND INV.ORDERING_REGION = OSF.ORDERING_REGION
    AND INV.DATE = OSF.DATE
LEFT JOIN _HISTORICAL_FORECAST HF -- Join historical forecast data
    ON INV.ASIN = HF.ASIN
    AND INV.ORDERING_REGION = HF.ORDERING_REGION
    AND INV.DATE = HF.FORECAST_DATE
WHERE INV.DATE BETWEEN $START_DATE AND $END_DATE;

CREATE OR REPLACE TEMP TABLE _OUT_OF_STOCK_ADS AS
SELECT
    ORDERING_REGION,
    ASIN,
    DATE,
    AVAILABLE_FBM,
    AVAILABLE_FBA,
    TOTAL_AVAILABLE,
    TOTAL_COMING_INVENTORY,
    RESERVED_FC_TRANSFER_FBA_QUANTITY,
    RESERVED_FC_PROCESSING_FBA_QUANTITY,
    WAREHOUSE_TOTAL_QUANTITY,
    INBOUND_FBA_QUANTITY,
    WHOLESALE_PRICE,
    BRAND,
    ON_ORDER_QUANTITY,
    WAREHOUSE_PROCESSING_QUANTITY,
    SUM_D2C_RESERVE,
    OUT_OF_STOCK,
    OUT_OF_STOCK_28,
    OUT_OF_STOCK_21,
    OUT_OF_STOCK_14,
    OUT_OF_STOCK_7,
    LAST_VALUE(FORECAST IGNORE NULLS)
      OVER (
        PARTITION BY ORDERING_REGION, ASIN
        ORDER BY DATE
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      ) AS FORECAST
FROM _OUT_OF_STOCK_ADS_UNFILLED
;
------------- end of out of stock table ----------------

CREATE OR REPLACE TEMP TABLE _FAILED_FILLS AS
select
            v.vendor_name as BRAND,
            po.po_number,
            p.asin,
            pos.state,
            ct.country_code,
            o.ordering_region,
            i.master_id as master_id,
            CASE
                WHEN pi.received_quantity > pi.current_quantity THEN 0 ELSE pi.current_quantity - coalesce(pi.received_quantity, 0)
            END AS failed_fills_orig,
            pi.current_quantity as ordered_quantity,
            coalesce(pi.received_quantity, 0) as received_quantity,
            min(rec.received_at) first_rec_date,
            max(rec.received_at) last_rec_date,
            po.placed_at ::date date_placed,
            coalesce(s.ship_date, po.requested_ship_date) ::date date_shipped_from_vendor

        from ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__PURCHASES po
        join ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__vendors v on po.vendor_id = v.id
        join ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__purchase_items pi on pi.purchase_id = po.id
        join ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__purchase_order_states pos on po.purchase_order_state_id = pos.id
        join ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__products p on pi.product_id = p.id
        join ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__ITEMS i on p.item_id = i.id
        join ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__WAREHOUSES w ON po.warehouse_id = w.id
        left join (SELECT DISTINCT id COUNTRY_ID, COUNTRY_CODE FROM ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__COUNTRIES) ct ON ct.country_id = p.country_id

        left join (SELECT DISTINCT PURCHASE_ID, MIN(SHIP_DATE) SHIP_DATE FROM ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__PURCHASE_SHIPMENT_NOTIFICATIONS GROUP         BY 1) s on s.purchase_id = po.id
        left join ANALYTICS_DB.STG_AMACZAR.STG_AMACZAR__PURCHASE_ITEM_RECEIPTS rec on rec.purchase_item_id=pi.id
        JOIN PATTERN_DB.PUBLIC.ORDERING_REGIONS O ON O.COUNTRY_CODE = ct.COUNTRY_CODE
        where pos.is_state_open and w.active and
        (pos.state<>'closed' and pos.state<>'cancelled' and pos.state<>'ready_to_reconcile' and pos.state<>'created')
group by all;

-- this is the range of dates (90 before first) for the last_rec_date
-- to use when exploding last rec date column
CREATE OR REPLACE TEMP TABLE _DATE_WINDOW_LAST AS
SELECT DATE
FROM PREDICT_DB.PUBLIC.DATE_DIM
WHERE DATE BETWEEN $START_DATE AND $END_DATE;

-- this is the range of dates (90 before first) for the date_placed
-- to use when exploding date placed column
CREATE OR REPLACE TEMP TABLE _DATE_WINDOW_PLACED AS
SELECT DATE
FROM PREDICT_DB.PUBLIC.DATE_DIM
WHERE DATE BETWEEN $START_DATE AND $END_DATE;

CREATE OR REPLACE TEMP TABLE _DATE_ASIN_MATRIX_LAST AS
SELECT
    D.DATE,
    F.ASIN,
    F.ORDERING_REGION,
    F.BRAND
FROM _DATE_WINDOW_LAST D
CROSS JOIN (
    SELECT DISTINCT ASIN, BRAND,
    ORDERING_REGION
    FROM _FAILED_FILLS
) F;

CREATE OR REPLACE TEMP TABLE _DATE_ASIN_MATRIX_PLACED AS
SELECT
    D.DATE,
    F.ASIN,
    F.ORDERING_REGION,
    F.BRAND
FROM _DATE_WINDOW_PLACED D
CROSS JOIN (
    SELECT DISTINCT ASIN, BRAND, ORDERING_REGION
    FROM _FAILED_FILLS
) F;

CREATE OR REPLACE TEMP TABLE _JOINED_LAST_REC_DATE_ASIN AS
SELECT
    M.ASIN,
    M.BRAND,
    M.ORDERING_REGION,
    F.STATE,
    F.FAILED_FILLS_ORIG,
    F.ORDERED_QUANTITY,
    F.RECEIVED_QUANTITY,
    F.FIRST_REC_DATE::date AS FIRST_REC_DATE,
    M.DATE AS LAST_REC_DATE, -- is this correct
    F.LAST_REC_DATE AS LAST_REC_DATE_ORIG,
    F.DATE_PLACED,
    F.DATE_SHIPPED_FROM_VENDOR,
    CASE
        WHEN (RECEIVED_QUANTITY = ORDERED_QUANTITY) AND LAST_REC_DATE IS NOT NULL THEN DATEDIFF(day, F.DATE_PLACED, LAST_REC_DATE)
        ELSE NULL
    END AS LEAD_TIME,
FROM _FAILED_FILLS F
FULL JOIN _DATE_ASIN_MATRIX_LAST M
ON F.ASIN = M.ASIN
   AND F.BRAND = M.BRAND
   AND F.ORDERING_REGION = M.ORDERING_REGION
   AND F.LAST_REC_DATE::date = M.DATE --what happens when last_rec_date is null?
;


--WHERE ASIN = 'B0CMMV4BP1' AND DATE = '2023-05-01';

CREATE OR REPLACE TEMP TABLE _ROLLING_AVG_LAST AS
SELECT
    DATE_PLACED,
    ASIN,
    BRAND,
    ORDERING_REGION,
    STATE,
    FAILED_FILLS_ORIG,
    ORDERED_QUANTITY,
    RECEIVED_QUANTITY,
    FIRST_REC_DATE,
    LAST_REC_DATE,
    LAST_REC_DATE_ORIG,
    DATE_SHIPPED_FROM_VENDOR,
    SUM(RECEIVED_QUANTITY) OVER (PARTITION BY ASIN, BRAND, ORDERING_REGION ORDER BY LAST_REC_DATE ROWS BETWEEN 89 PRECEDING AND CURRENT ROW) / NULLIF(SUM(ORDERED_QUANTITY) OVER (PARTITION BY ASIN, BRAND, ORDERING_REGION ORDER BY LAST_REC_DATE ROWS BETWEEN 89 PRECEDING AND CURRENT ROW), 0) AS AVG_PARTIAL_FILL_RATE_90,
    AVG(LEAD_TIME) OVER (PARTITION BY ASIN, BRAND, ORDERING_REGION ORDER BY LAST_REC_DATE ROWS BETWEEN 89 PRECEDING AND CURRENT ROW) AS ROLLING_AVG_LEAD_TIME_90
FROM _JOINED_LAST_REC_DATE_ASIN;

CREATE OR REPLACE TEMP TABLE _FIRST_TWO_FEATURES AS
SELECT S.*,
    J.AVG_PARTIAL_FILL_RATE_90,
    J.ROLLING_AVG_LEAD_TIME_90
FROM _OUT_OF_STOCK_ADS S
LEFT JOIN _ROLLING_AVG_LAST J
ON S.ASIN = J.ASIN
    AND S.BRAND = J.BRAND
    AND S.ORDERING_REGION = J.ORDERING_REGION
    AND S.DATE = J.LAST_REC_DATE;

CREATE OR REPLACE TEMP TABLE _JOINED_DATE_PLACED_ASIN AS
SELECT
    M.ASIN,
    M.BRAND,
    M.ORDERING_REGION,
    F.STATE,
    F.FAILED_FILLS_ORIG AS FAILED_FILLS,
    F.ORDERED_QUANTITY,
    F.RECEIVED_QUANTITY,
    F.FIRST_REC_DATE::date AS FIRST_REC_DATE,
    F.LAST_REC_DATE::date AS LAST_REC_DATE,
    --M.DATE AS LAST_REC_DATE,
    M.DATE AS DATE_PLACED, -- is this wrong?
    F.DATE_SHIPPED_FROM_VENDOR
FROM _FAILED_FILLS F
FULL JOIN _DATE_ASIN_MATRIX_PLACED M
ON F.ASIN = M.ASIN
   AND F.BRAND = M.BRAND
   AND M.ORDERING_REGION = F.ORDERING_REGION
   AND F.DATE_PLACED::date = M.DATE;


CREATE OR REPLACE TEMP TABLE _ROLLING_AVG_PLACED AS
SELECT
    DATE_PLACED,
    ASIN,
    BRAND,
    ORDERING_REGION,
    STATE,
    FAILED_FILLS,
    ORDERED_QUANTITY,
    RECEIVED_QUANTITY,
    FIRST_REC_DATE,
    LAST_REC_DATE,
    DATE_SHIPPED_FROM_VENDOR,
    SUM(FAILED_FILLS) OVER (PARTITION BY ASIN, BRAND, ORDERING_REGION ORDER BY DATE_PLACED ROWS BETWEEN 89 PRECEDING AND CURRENT ROW) AS NUMBER_FAILED_FILLS_90
FROM _JOINED_DATE_PLACED_ASIN;



CREATE OR REPLACE TEMP TABLE _THIRD_FEATURE AS
SELECT S.*,
    J.NUMBER_FAILED_FILLS_90
FROM _FIRST_TWO_FEATURES S
LEFT JOIN _ROLLING_AVG_PLACED J
ON S.ASIN = J.ASIN
    AND S.BRAND = J.BRAND
    AND S.ORDERING_REGION = J.ORDERING_REGION
    AND S.DATE = J.DATE_PLACED; -- is this right?


-- creates table that filters down failed fills table to one row per asin, where row is oldest purchase order where haven't recevied inventory yet
-- feature is: for a particular asin, what is the longest time we've had to wait since order was placed until current date (in streamlit table) still not having received the order, when order was never even shipped
CREATE OR REPLACE TEMP TABLE _OLDEST_PO AS
SELECT
    ASIN,
    BRAND,
    STATE,
    ORDERING_REGION,
    FAILED_FILLS_ORIG AS FAILED_FILLS,
    ORDERED_QUANTITY,
    RECEIVED_QUANTITY,
    FIRST_REC_DATE,
    LAST_REC_DATE,
    DATE_PLACED,
    DATE_SHIPPED_FROM_VENDOR,
FROM _FAILED_FILLS
WHERE  (RECEIVED_QUANTITY = 0 AND ORDERED_QUANTITY > 0)
    AND DATE_SHIPPED_FROM_VENDOR IS NULL
    --AND ORDERING_REGION = 'US'
QUALIFY ROW_NUMBER() OVER (PARTITION BY ASIN, BRAND, ORDERING_REGION ORDER BY DATE_PLACED ASC) = 1;

--WHERE ASIN = 'B09N2CZXL6' AND BRAND = 'Feetures';

-- left join to streamlit table to calculate feature (current date - date placed for those orders never received)
-- only do this for orders where date placed was before date (filters table even further)
CREATE OR REPLACE TEMP TABLE _FILTERED_FILLS AS
SELECT
    S.ASIN,
    S.DATE,
    S.BRAND,
    S.ORDERING_REGION,
    F.STATE,
    F.FAILED_FILLS,
    F.ORDERED_QUANTITY,
    F.RECEIVED_QUANTITY,
    F.FIRST_REC_DATE,
    F.LAST_REC_DATE,
    F.DATE_PLACED,
    F.DATE_SHIPPED_FROM_VENDOR,
    S.DATE - F.DATE_PLACED AS OLDEST_ORDER_NOT_RECEIVED
FROM _OUT_OF_STOCK_ADS S
LEFT JOIN _OLDEST_PO F
    ON F.ASIN = S.ASIN AND F.BRAND = S.BRAND AND F.ORDERING_REGION = S.ORDERING_REGION
WHERE F.DATE_PLACED <= S.DATE;

CREATE OR REPLACE TEMP TABLE _FOURTH_FEATURE AS
SELECT S.*,
    J.OLDEST_ORDER_NOT_RECEIVED
FROM _THIRD_FEATURE S
LEFT JOIN _FILTERED_FILLS J
ON S.ASIN = J.ASIN
    AND S.BRAND = J.BRAND
    AND S.ORDERING_REGION = J.ORDERING_REGION
    AND S.DATE = J.DATE;

-- same table as above but for orders that were shipped but never received
CREATE OR REPLACE TEMP TABLE _SHIPPED_NOT_RECEIVED AS
SELECT
    ASIN,
    BRAND,
    STATE,
    FAILED_FILLS_ORIG AS FAILED_FILLS,
    ORDERING_REGION,
    ORDERED_QUANTITY,
    RECEIVED_QUANTITY,
    FIRST_REC_DATE,
    LAST_REC_DATE,
    DATE_PLACED,
    DATE_SHIPPED_FROM_VENDOR,
FROM _FAILED_FILLS
WHERE (RECEIVED_QUANTITY = 0 AND ORDERED_QUANTITY > 0)
    AND DATE_SHIPPED_FROM_VENDOR IS NOT NULL
    --AND COUNTRY_CODE = 'US'
QUALIFY ROW_NUMBER() OVER (PARTITION BY ASIN, BRAND, ORDERING_REGION ORDER BY DATE_PLACED ASC) = 1;

CREATE OR REPLACE TEMP TABLE _FILTERED_FILLS_SHIPPED AS
SELECT
    S.ASIN,
    S.DATE,
    S.BRAND,
    S.ORDERING_REGION,
    F.STATE,
    F.FAILED_FILLS,
    F.ORDERED_QUANTITY,
    F.RECEIVED_QUANTITY,
    F.FIRST_REC_DATE,
    F.LAST_REC_DATE,
    F.DATE_PLACED,
    F.DATE_SHIPPED_FROM_VENDOR,
    S.DATE - F.DATE_PLACED AS OLDEST_ORDER_NOT_RECEIVED_BUT_SHIPPED
FROM _OUT_OF_STOCK_ADS S
LEFT JOIN _SHIPPED_NOT_RECEIVED F
    ON F.ASIN = S.ASIN AND F.BRAND = S.BRAND AND F.ORDERING_REGION = S.ORDERING_REGION
WHERE F.DATE_PLACED <= S.DATE;

CREATE OR REPLACE TABLE PATTERN_DB.DATA_SCIENCE_STAGE.OUT_OF_STOCK_ADS AS
SELECT S.*,
    ai.vendor_id as vendor_id,
    J.OLDEST_ORDER_NOT_RECEIVED_BUT_SHIPPED
FROM _FOURTH_FEATURE S
LEFT JOIN _FILTERED_FILLS_SHIPPED J
ON S.ASIN = J.ASIN
    AND S.BRAND = J.BRAND
    AND S.ORDERING_REGION = J.ORDERING_REGION
    AND S.DATE = J.DATE
left join _ASINS as ai 
    ON S.ASIN = ai.ASIN
    AND S.BRAND = ai.BRAND
    AND S.ORDERING_REGION = ai.ORDERING_REGION;